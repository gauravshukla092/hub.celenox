#!/usr/bin/env python2
# Example args: ./export-client-env uat booker heroku-config
# Modes: heroku-config, dot-env
import binascii
import json
import os
import subprocess
import sys

my_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(my_dir, os.pardir))
import util

env_id = sys.argv[1]
util.verify_setup([env_id])

role = sys.argv[2]

key_name = util.resource_name(env_id, role)

mode = sys.argv[3]

with open(os.path.expanduser("~/.ssh/freebird/{}".format(key_name))) as private_key:
    tunnel_ssh_private_key = binascii.hexlify(private_key.read())

subprocess.check_output(["./scripts/convox/set-convox-env", env_id])
convox_app_info = json.loads(subprocess.check_output(["convox", "api", "get", "/apps/{}/formation".format(role)]))
main_service, = (service for service in convox_app_info if service["name"] == role)
ssh_service, = (service for service in convox_app_info if service["name"] == "ssh-tunnel-host")
main_service_host = main_service["balancer"]
main_service_port, = main_service["ports"]
ssh_service_host = ssh_service["balancer"]
ssh_service_port, = ssh_service["ports"]

env_vars = {
    "TUNNEL_SSH_PRIVATE_KEY": tunnel_ssh_private_key,
    "TUNNEL_KEY_NAME": key_name,
    "TUNNEL_LOCAL_PORT": main_service_port,
    "TUNNEL_SERVICE_HOST": main_service_host,
    "TUNNEL_SERVICE_PORT": main_service_port,
    "TUNNEL_SSH_PORT": 222,
    "TUNNEL_SSH_USER": "root",
    "TUNNEL_SSH_HOST": ssh_service_host,
}

if mode == "heroku-config":
    env_var_pairs = " ".join("{}={}".format(key, value) for key, value in env_vars.iteritems())
    print "heroku config:set --remote {env} {vars}".format(env=env_id, vars=env_var_pairs)
elif mode == "dot-env":
    print "\n".join("{}={}".format(key, value) for key, value in env_vars.iteritems())
else:
    print "Illegal mode: {}".format(mode)
    sys.exit(-1)
