#!/usr/bin/env python

# Usage example: ./create-cassandra uat
import json
import os
import sys

import boto3

my_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(my_dir, os.pardir))
import util

env_id = sys.argv[1]
util.verify_setup([env_id])

env = util.load_config()["env"][env_id]
client = boto3.client('ec2', region_name=env["region"])

env_vars = json.loads(util.get_env_vars(env_id))
user = env_vars["cassandra"]["user"]

# See https://docs.datastax.com/en/cassandra/2.1/cassandra/security/secureFireWall_r.html
# This is for a single-node cluster, so we are not opening ports for inter-node communication.
sg_opts = [
    ("cassandraClient", None),
    ("cassandra", {
        "IpPermissions": [
            {
                "IpProtocol": "tcp",
                "FromPort": 7199,
                "ToPort": 7199,
                "UserIdGroupPairs": [{
                    "GroupName": util.resource_name(env_id, "cassandraClient")
                }],
            },
            {
                "IpProtocol": "tcp",
                "FromPort": 9042,
                "ToPort": 9042,
                "UserIdGroupPairs": [{
                    "GroupName": util.resource_name(env_id, "cassandraClient")
                }],
            },
            {
                "IpProtocol": "tcp",
                "FromPort": 9160,
                "ToPort": 9160,
                "UserIdGroupPairs": [{
                    "GroupName": util.resource_name(env_id, "cassandraClient")
                }]
            },
        ]
    }),
]

run_instance_opts = {
    "UserData": open(os.path.join(my_dir, "launch-cassandra")).read().format(
        cluster_name=util.resource_name(env_id, "cassandra"),
        aws_access_key_id=user["awsAccessKeyId"],
        aws_secret_access_key=user["awsSecretAccessKey"],
        env_id=env_id,
        dd_api_key=env_vars["datadog"]["apiKey"],
    ),
    "InstanceType": "m4.xlarge",
    "BlockDeviceMappings": [
        {
            'DeviceName': '/dev/sdf',
            'Ebs': {
                'VolumeSize': 200,
                'DeleteOnTermination': True,
                'VolumeType': 'gp2',
            },
        }
    ]
}

created = util.create_instance(env_id, "cassandra", sg_opts, run_instance_opts)

print "Waiting for Cassandra to start up..."
util.wait_for_log(created["runner"], "/var/log/cassandra/system.log", "Listening for thrift clients")

print "Setting default port for cqlsh..."
runner = created["runner"]
runner.run("echo 'export CQLSH_HOST=my-private-ip' >> .bashrc")

print "Setting up snapshot cron job..."
# Run the snapshot in the middle of the night US time in case it affects performance
runner.run("echo '30 09 * * * CQLSH_HOST=my-private-ip nice ~/scripts/snapshot-cassandra {} >> ~/cassandra-snapshots.log 2>&1' | crontab".format(env_id))
print "Cassandra created."
